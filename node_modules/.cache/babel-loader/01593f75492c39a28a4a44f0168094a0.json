{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Users\\\\john4\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\javascript_study\\\\super_market_recovery\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\john4\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\javascript_study\\\\super_market_recovery\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\john4\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\javascript_study\\\\super_market_recovery\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { observable, action, computed } from 'mobx';\nlet MarketStore = (_class = (_temp = class MarketStore {\n  constructor({\n    root\n  }) {\n    _initializerDefineProperty(this, \"selectedItem\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"put\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"take\", _descriptor3, this);\n\n    this.root = root;\n  }\n\n  get total() {\n    console.log(\"총합 계산...\");\n    return this.selectedItems.reduce((previous, current) => {\n      return previous + current.price * current.count;\n    }, 0);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"selectedItem\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"put\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return ({\n      name,\n      price\n    }) => {\n      const exists = this.selectedItem.find(item => item.name === name);\n\n      if (!exists) {\n        this.selectedItem.push({\n          name,\n          price,\n          count: 1\n        });\n        return;\n      }\n\n      exists.count++;\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"take\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return name => {\n      const itemToTake = this.selectedItem.find(item => item.name === name);\n      itemToTake.count--;\n\n      if (itemToTake.count === 0) {\n        this.selectedItems.remove(itemToTake);\n      }\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"total\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"total\"), _class.prototype)), _class);\nexport { MarketStore as default };","map":{"version":3,"sources":["C:/Users/john4/OneDrive/바탕 화면/javascript_study/super_market_recovery/src/Components/Market.tsx"],"names":["observable","action","computed","MarketStore","constructor","root","total","console","log","selectedItems","reduce","previous","current","price","count","name","exists","selectedItem","find","item","push","itemToTake","remove"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,MAA5C;IASqBC,W,sBAAN,MAAMA,WAAN,CAAkB;AAG7BC,EAAAA,WAAW,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAgB;AAAA;;AAAA;;AAAA;;AACvB,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AAyBD,MACIC,KADJ,GACW;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,WAAO,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACpD,aAAOD,QAAQ,GAAGC,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACE,KAA1C;AACC,KAFE,EAEA,CAFA,CAAP;AAGH;;AApC4B,C,sFAC5Bd,U;;;;;WAA0B,E;;uEAM1BC,M;;;;;WACK,CAAC;AAACc,MAAAA,IAAD;AAAOF,MAAAA;AAAP,KAAD,KAA2B;AAC7B,YAAMG,MAAM,GAAG,KAAKC,YAAL,CAAkBC,IAAlB,CAAuBC,IAAI,IAAIA,IAAI,CAACJ,IAAL,KAAcA,IAA7C,CAAf;;AACA,UAAG,CAACC,MAAJ,EAAW;AACP,aAAKC,YAAL,CAAkBG,IAAlB,CAAuB;AACnBL,UAAAA,IADmB;AAEnBF,UAAAA,KAFmB;AAGnBC,UAAAA,KAAK,EAAE;AAHY,SAAvB;AAKA;AACH;;AACDE,MAAAA,MAAM,CAACF,KAAP;AACH,K;;wEAEAb,M;;;;;WACMc,IAAI,IAAI;AACX,YAAMM,UAAU,GAAG,KAAKJ,YAAL,CAAkBC,IAAlB,CAAuBC,IAAI,IAAIA,IAAI,CAACJ,IAAL,KAAcA,IAA7C,CAAnB;AACAM,MAAAA,UAAU,CAACP,KAAX;;AACA,UAAIO,UAAU,CAACP,KAAX,KAAqB,CAAzB,EAA4B;AACxB,aAAKL,aAAL,CAAmBa,MAAnB,CAA0BD,UAA1B;AACH;AACJ,K;;0DAEAnB,Q;SA9BgBC,W","sourcesContent":["import {observable, action, computed } from 'mobx';\r\n\r\ninterface Iprops {\r\n    name: string;\r\n    price : string;\r\n    root: object;\r\n\r\n}\r\n\r\nexport default class MarketStore {\r\n    @observable selectedItem = [];\r\n\r\n    constructor({root}:Iprops) {\r\n        this.root = root;\r\n    }\r\n\r\n    @action\r\n    put = ({name, price}: Iprops) => {\r\n        const exists = this.selectedItem.find(item => item.name === name);\r\n        if(!exists){\r\n            this.selectedItem.push({\r\n                name,\r\n                price,\r\n                count: 1,\r\n            });\r\n            return;\r\n        }\r\n        exists.count++;\r\n    };\r\n\r\n    @action\r\n    take = name => {\r\n        const itemToTake = this.selectedItem.find(item => item.name === name);\r\n        itemToTake.count--;\r\n        if (itemToTake.count === 0) {\r\n            this.selectedItems.remove(itemToTake);\r\n        }\r\n    };\r\n\r\n    @computed\r\n    get total(){\r\n        console.log(\"총합 계산...\");\r\n        return this.selectedItems.reduce((previous, current) => {\r\n            return previous + current.price * current.count;\r\n            }, 0);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}