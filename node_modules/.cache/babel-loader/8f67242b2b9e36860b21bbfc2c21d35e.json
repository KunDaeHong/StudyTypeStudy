{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Users\\\\john4\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\javascript_study\\\\super_market_recovery\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\john4\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\javascript_study\\\\super_market_recovery\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\john4\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\javascript_study\\\\super_market_recovery\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { observable, action, computed } from \"mobx\";\nlet MarketStore = (_class = (_temp = class MarketStore {\n  constructor() {\n    _initializerDefineProperty(this, \"selectedItems\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"put\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"take\", _descriptor3, this);\n  }\n\n  get total() {\n    console.log(\"총합 계산...\");\n    return this.selectedItems.reduce((previous, current) => {\n      return previous + current.price * current.count;\n    }, 0);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"selectedItems\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"put\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return (name, price) => {\n      // 존재하는지 찾고\n      const exists = this.selectedItems.find(item => item.name === name);\n\n      if (!exists) {\n        // 존재하지 않는다면 새로 집어넣습니다.\n        this.selectedItems.push({\n          name,\n          price,\n          count: 1\n        });\n        return;\n      } // 존재 한다면 count 값만 올립니다.\n\n\n      exists.count++;\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"take\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return name => {\n      const itemToTake = this.selectedItems.find(item => item.name === name);\n      itemToTake.count--;\n\n      if (itemToTake.count === 0) {// 갯수가 0 이면\n        //   this.selectedItems.remove(itemToTake); // 배열에서 제거처리합니다.\n      }\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"total\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"total\"), _class.prototype)), _class);\nexport { MarketStore as default };","map":{"version":3,"sources":["C:/Users/john4/OneDrive/바탕 화면/javascript_study/super_market_recovery/src/Stores/market/market.ts"],"names":["observable","action","computed","MarketStore","total","console","log","selectedItems","reduce","previous","current","price","count","name","exists","find","item","push","itemToTake"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA6C,MAA7C;IAEqBC,W,sBAAN,MAAMA,WAAN,CAAkB;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AA8B/B,MACIC,KADJ,GACY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,WAAO,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACtD,aAAOD,QAAQ,GAAGC,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACE,KAA1C;AACD,KAFM,EAEJ,CAFI,CAAP;AAGD;;AApC8B,C,uFAC9BZ,U;;;;;WAA2B,E;;uEAE3BC,M;;;;;WACK,CAACY,IAAD,EAAeF,KAAf,KAAiC;AACrC;AACA,YAAMG,MAAM,GAAG,KAAKP,aAAL,CAAmBQ,IAAnB,CAAyBC,IAAD,IAAUA,IAAI,CAACH,IAAL,KAAcA,IAAhD,CAAf;;AACA,UAAI,CAACC,MAAL,EAAa;AACX;AACA,aAAKP,aAAL,CAAmBU,IAAnB,CAAwB;AACtBJ,UAAAA,IADsB;AAEtBF,UAAAA,KAFsB;AAGtBC,UAAAA,KAAK,EAAE;AAHe,SAAxB;AAKA;AACD,OAXoC,CAYrC;;;AACAE,MAAAA,MAAM,CAACF,KAAP;AACD,K;;wEAEAX,M;;;;;WACOY,IAAD,IAAkB;AACvB,YAAMK,UAAU,GAAG,KAAKX,aAAL,CAAmBQ,IAAnB,CAAyBC,IAAD,IAAUA,IAAI,CAACH,IAAL,KAAcA,IAAhD,CAAnB;AACAK,MAAAA,UAAU,CAAEN,KAAZ;;AACA,UAAIM,UAAU,CAAEN,KAAZ,KAAsB,CAA1B,EAA6B,CAC3B;AACA;AACD;AACF,K;;0DAEAV,Q;SA9BkBC,W","sourcesContent":["import { observable, action, computed } from \"mobx\";\r\n\r\nexport default class MarketStore {\r\n  @observable selectedItems = [];\r\n\r\n  @action\r\n  put = (name: string, price: number) => {\r\n    // 존재하는지 찾고\r\n    const exists = this.selectedItems.find((item) => item.name === name);\r\n    if (!exists) {\r\n      // 존재하지 않는다면 새로 집어넣습니다.\r\n      this.selectedItems.push({\r\n        name,\r\n        price,\r\n        count: 1,\r\n      });\r\n      return;\r\n    }\r\n    // 존재 한다면 count 값만 올립니다.\r\n    exists.count++;\r\n  };\r\n\r\n  @action\r\n  take = (name: string) => {\r\n    const itemToTake = this.selectedItems.find((item) => item.name === name);\r\n    itemToTake!.count--;\r\n    if (itemToTake!.count === 0) {\r\n      // 갯수가 0 이면\r\n      //   this.selectedItems.remove(itemToTake); // 배열에서 제거처리합니다.\r\n    }\r\n  };\r\n\r\n  @computed\r\n  get total() {\r\n    console.log(\"총합 계산...\");\r\n    return this.selectedItems.reduce((previous, current) => {\r\n      return previous + current.price * current.count;\r\n    }, 0);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}